// list out all experiments 
// from /api/Experiments#list-experiments
export interface ListExperimentsResponse {
    /**
     * A list of experiment objects
     */
    objects: {
      /**
       * Unique identifier for the experiment
       */
      id: string;
      /**
       * Unique identifier for the project that the experiment belongs under
       */
      project_id: string;
      /**
       * Name of the experiment. Within a project, experiment names are unique
       */
      name: string;
      /**
       * Textual description of the experiment
       */
      description?: string;
      /**
       * Date of experiment creation
       */
      created?: string;
      /**
       * Metadata about the state of the repo when the experiment was created
       */
      repo_info?: {
        /**
         * SHA of most recent commit
         */
        commit?: string;
        /**
         * Name of the branch the most recent commit belongs to
         */
        branch?: string;
        /**
         * Name of the tag on the most recent commit
         */
        tag?: string;
        /**
         * Whether or not the repo had uncommitted changes when snapshotted
         */
        dirty?: boolean;
        /**
         * Name of the author of the most recent commit
         */
        author_name?: string;
        /**
         * Email of the author of the most recent commit
         */
        author_email?: string;
        /**
         * Most recent commit message
         */
        commit_message?: string;
        /**
         * Time of the most recent commit
         */
        commit_time?: string;
        /**
         * If the repo was dirty when run, this includes the diff between the current state of the repo and the most recent commit.
         */
        git_diff?: string;
      };
      /**
       * Commit, taken directly from `repo_info.commit`
       */
      commit?: string;
      /**
       * Id of default base experiment to compare against when viewing this experiment
       */
      base_exp_id?: string;
      /**
       * Date of experiment deletion, or null if the experiment is still active
       */
      deleted_at?: string;
      /**
       * Identifier of the linked dataset, or null if the experiment is not linked to a dataset
       */
      dataset_id?: string;
      /**
       * Version number of the linked dataset the experiment was run against. This can be used to reproduce the experiment after the dataset has been modified.
       */
      dataset_version?: string;
      /**
       * Whether or not the experiment is public. Public experiments can be viewed by anybody inside or outside the organization
       */
      public: boolean;
      /**
       * Identifies the user who created the experiment
       */
      user_id?: string;
      /**
       * User-controlled metadata about the experiment
       */
      metadata?: {
        [k: string]: {
          [k: string]: unknown;
        };
      };
    }[];
}

// fetch events in experiment
// from /api/Experiments#fetch-experiment-get-form
// modified slightly, indicated by `NOTE` comments
export interface FetchExperimentResponse {
    /**
     * A list of fetched events
     */
    events: {
      /**
       * A unique identifier for the experiment event. If you don't provide one, BrainTrust will generate one for you
       */
      id: string;
      /**
       * The transaction id of an event is unique to the network operation that processed the event insertion. Transaction ids are monotonically increasing over time and can be used to retrieve a versioned snapshot of the experiment (see the `version` parameter)
       */
      _xact_id: string;
      /**
       * The timestamp the experiment event was created
       */
      created: string;
      /**
       * Unique identifier for the project that the experiment belongs under
       */
      project_id: string;
      /**
       * Unique identifier for the experiment
       */
      experiment_id: string;
      /**
       * The arguments that uniquely define a test case (an arbitrary, JSON serializable object). Later on, Braintrust will use the `input` to know whether two test cases are the same between experiments, so they should not contain experiment-specific state. A simple rule of thumb is that if you run the same experiment twice, the `input` should be identical
       */
      input?: {
        [k: string]: unknown;
      };
      /**
       * The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question
       */
      output?: {
        [k: string]: unknown;
      };
      /**
       * The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate your experiments while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models
       */
      expected?: {
        [k: string]: unknown;
      };
      /**
       * The error that occurred, if any.
       */
      error?: {
        [k: string]: unknown;
      };
      /**
       * A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare experiments
       */
      scores?: {
        [k: string]: number;
      };
      /**
       * A dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings
       */
      metadata?: {
        /**
         * The model used for this example
         */
        model?: string;
        [k: string]: {
          [k: string]: unknown;
        } | unknown; // NOTE: modified index signature, differs from api docs
      };
      /**
       * A list of tags to log
       */
      tags?: string[];
      /**
       * Metrics are numerical measurements tracking the execution of the code that produced the experiment event. Use "start" and "end" to track the time span over which the experiment event was produced
       */
      metrics?: {
        /**
         * A unix timestamp recording when the section of code which produced the experiment event started
         */
        start?: number;
        /**
         * A unix timestamp recording when the section of code which produced the experiment event finished
         */
        end?: number;
        /**
         * The number of tokens in the prompt used to generate the experiment event (only set if this is an LLM span)
         */
        prompt_tokens?: number;
        /**
         * The number of tokens in the completion generated by the model (only set if this is an LLM span)
         */
        completion_tokens?: number;
        /**
         * The total number of tokens in the input and output of the experiment event.
         */
        tokens?: number;
        /**
         * This metric is deprecated
         */
        caller_functionname?: {
          [k: string]: unknown;
        };
        /**
         * This metric is deprecated
         */
        caller_filename?: {
          [k: string]: unknown;
        };
        /**
         * This metric is deprecated
         */
        caller_lineno?: {
          [k: string]: unknown;
        };
        [k: string]: number | unknown; // NOTE: modified from API docs; had to add `unknown`
      };
      /**
       * Context is additional information about the code that produced the experiment event. It is essentially the textual counterpart to `metrics`. Use the `caller_*` attributes to track the location in code which produced the experiment event
       */
      context?: {
        /**
         * The function in code which created the experiment event
         */
        caller_functionname?: string;
        /**
         * Name of the file in code where the experiment event was created
         */
        caller_filename?: string;
        /**
         * Line of code where the experiment event was created
         */
        caller_lineno?: number;
        [k: string]: string | number | {
          [k: string]: unknown;
        } | undefined; // NOTE: modified index signature, differs from api docs
      };
      /**
       * A unique identifier used to link different experiment events together as part of a full trace. See the [tracing guide](https://www.braintrust.dev/docs/guides/tracing) for full details on tracing
       */
      span_id: string;
      /**
       * An array of the parent `span_ids` of this experiment event. This should be empty for the root span of a trace, and should most often contain just one parent element for subspans
       */
      span_parents?: string[];
      /**
       * A unique identifier for the trace this experiment event belongs to
       */
      root_span_id: string;
      /**
       * Human-identifying attributes of the span, such as name, type, etc.
       */
      span_attributes?: {
        /**
         * Name of the span, for display purposes only
         */
        name?: string;
        /**
         * Type of the span, for display purposes only
         */
        type?: "llm" | "score" | "function" | "eval" | "task" | "tool" | null;
        [k: string]: string | "llm" | "score" | "function" | "eval" | "task" | "tool" | null | {
            [k: string]: unknown;
          } | undefined; // NOTE: modified index signature, differs from API docs
      };
      /**
       * Whether this span is a root span
       */
      is_root?: boolean;
      /**
       * Indicates the event was copied from another object.
       */
      origin?: {
        /**
         * Type of the object the event is originating from.
         */
        object_type: ("experiment" | "dataset" | "prompt" | "function" | "prompt_session") | "project_logs";
        /**
         * ID of the object the event is originating from.
         */
        object_id: string;
        /**
         * ID of the original event.
         */
        id: string;
        /**
         * Transaction ID of the original event.
         */
        _xact_id: string;
        /**
         * Created timestamp of the original event. Used to help sort in the UI
         */
        created?: string;
      };
    }[];
    /**
     * Pagination cursor
     *
     * Pass this string directly as the `cursor` param to your next fetch request to get the next page of results. Not provided if the returned result set is empty.
     */
    cursor?: string;
}